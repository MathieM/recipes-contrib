{
    "manifests": {
        "xip-solid-foundation/pre-commit": {
            "manifest": {
                "copy-from-recipe": {
                    "bin/": "%BIN_DIR%/",
                    "config/": "%CONFIG_DIR%/",
                    ".php-cs-fixer.php": ".php-cs-fixer.php",
                    "phpunit.xml.dist": "phpunit.xml.dist"
                }
            },
            "files": {
                ".php-cs-fixer.php": {
                    "contents": [
                        "<?php declare(strict_types=1);",
                        "",
                        "$finder = PhpCsFixer\\Finder::create()",
                        "    ->in(__DIR__.'/src')",
                        "    ->in(__DIR__.'/tests');",
                        "",
                        "$config = new PhpCsFixer\\Config();",
                        "return $config->setRules([",
                        "        '@PSR12' => true,",
                        "        'strict_param' => true,",
                        "        'array_syntax' => ['syntax' => 'short'],",
                        "        '@Symfony' => true,",
                        "        '@Symfony:risky' => true,",
                        "        'declare_strict_types' => true,",
                        "        'no_useless_else' => true,",
                        "        'no_useless_return' => true,",
                        "        'no_alias_functions' => true,",
                        "        'ordered_imports' => true,",
                        "        'void_return' => true,",
                        "    ])",
                        "    ->setRiskyAllowed(true)",
                        "    ->setFinder($finder)",
                        "    ;",
                        ""
                    ],
                    "executable": false
                },
                "bin/pre-commit": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "# Automatic usage by installing symbolic link:",
                        "# ln -sf ../../bin/pre-commit .git/hooks/pre-commit",
                        "",
                        "# Enable TTY, so fastest runs on a single line and looks cooler",
                        "exec < /dev/tty",
                        "",
                        "if [[ -z `docker ps -q --no-trunc | grep $(docker-compose ps -q apache2)` ]]; then",
                        "    echo -e \"\\e[41m COMMIT FAILED: Docker-compose is not running! \\e[0m\";",
                        "    exit 1",
                        "fi",
                        "",
                        "# Install phpunit synchronously to avoid problems.",
                        "docker-compose exec php bin/phpunit install",
                        "",
                        "docker-compose exec -T php bin/console cache:warmup --env=prod",
                        "if [[ $? != \"0\" ]]",
                        "then",
                        "    echo -e \"\\e[41m COMMIT FAILED: Cannot warm cache for env=prod! \\e[0m\":",
                        "    exit 1",
                        "fi",
                        "",
                        "# see which files you wanted to commit, fix code style and re-add",
                        "FILES=` git status --porcelain | grep -e '^[AM]\\(.*\\).php$' | cut -c 3- | tr '\\n' ' '`",
                        "if [[ $FILES ]]",
                        "then",
                        "    FILES_NO_APPLICATION=`echo ${FILES} | sed \"s/api\\///g\"`",
                        "    docker-compose exec -T php vendor/bin/php-cs-fixer fix",
                        "    git add ${FILES}",
                        "fi",
                        "",
                        "# remove outdated code coverage files",
                        "rm -rf var/coverage.txt public/test.html",
                        "",
                        "# warmup test cache to speed up tests",
                        "docker-compose exec php bin/console cache:warmup --env=test",
                        "",
                        "# Run Tests and generate code coverage",
                        "docker-compose exec php bash -c \"XDEBUG_MODE=coverage vendor/bin/paratest --coverage-html=public/test.html --coverage-text=var/coverage.txt tests\"",
                        "if [[ $? != \"0\" ]]",
                        "then",
                        "    echo -e \"\\e[41m COMMIT FAILED: You have test errors! \\e[0m\":",
                        "    exit 1",
                        "fi",
                        "",
                        "# merge code coverage",
                        "echo \"Full HTML coverage at http://0.0.0.0/test.html/index.html\"",
                        "",
                        "OK=`docker-compose exec -T php head -n10 var/coverage.txt | grep Lines | grep \"100.00%\"`",
                        "if [[ ${OK} = \"\" ]]",
                        "then",
                        "    echo -e \"\\e[41m COMMIT FAILED: Code coverage not 100%! \\e[0m\":",
                        "    exit 1",
                        "fi",
                        "",
                        "echo \"\"",
                        ""
                    ],
                    "executable": true
                },
                "config/packages/test/dama_doctrine_test_bundle.yaml": {
                    "contents": [
                        "dama_doctrine_test:",
                        "    enable_static_connection: true",
                        "    enable_static_meta_data_cache: true",
                        "    enable_static_query_cache: true",
                        "",
                        ""
                    ],
                    "executable": false
                },
                "phpunit.xml.dist": {
                    "contents": [
                        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                        "",
                        "<!-- https://phpunit.readthedocs.io/en/latest/configuration.html -->",
                        "<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                        "         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"",
                        "         backupGlobals=\"false\"",
                        "         colors=\"true\"",
                        "         bootstrap=\"tests/bootstrap.php\"",
                        "         convertDeprecationsToExceptions=\"false\"",
                        "         forceCoversAnnotation=\"true\"",
                        "         beStrictAboutChangesToGlobalState=\"true\"",
                        "         beStrictAboutOutputDuringTests=\"true\"",
                        "         beStrictAboutResourceUsageDuringSmallTests=\"true\"",
                        "         beStrictAboutTodoAnnotatedTests=\"true\"",
                        "         beStrictAboutCoversAnnotation=\"false\"",
                        ">",
                        "    <php>",
                        "        <ini name=\"display_errors\" value=\"1\" />",
                        "        <ini name=\"error_reporting\" value=\"-1\" />",
                        "        <server name=\"APP_ENV\" value=\"test\" force=\"true\" />",
                        "        <server name=\"SHELL_VERBOSITY\" value=\"-1\" />",
                        "        <server name=\"SYMFONY_PHPUNIT_REMOVE\" value=\"\" />",
                        "        <server name=\"SYMFONY_PHPUNIT_VERSION\" value=\"9.5\" />",
                        "    </php>",
                        "",
                        "    <testsuites>",
                        "        <testsuite name=\"Project Test Suite\">",
                        "            <directory>tests</directory>",
                        "        </testsuite>",
                        "    </testsuites>",
                        "",
                        "    <coverage processUncoveredFiles=\"true\">",
                        "        <include>",
                        "            <directory suffix=\".php\">src</directory>",
                        "        </include>",
                        "        <exclude>",
                        "            <file>src/Kernel.php</file>",
                        "            <file>src/Command/ResetAllCommand.php</file>",
                        "            <directory>src/Migrations</directory>",
                        "            <directory>src/DataFixtures</directory>",
                        "        </exclude>",
                        "    </coverage>",
                        "",
                        "    <listeners>",
                        "        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\" />",
                        "    </listeners>",
                        "",
                        "    <extensions>",
                        "        <extension class=\"DAMA\\DoctrineTestBundle\\PHPUnit\\PHPUnitExtension\" />",
                        "    </extensions>",
                        "</phpunit>",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "5e376d219bfdb69be5a154ad94531150ce8686da"
        }
    }
}
